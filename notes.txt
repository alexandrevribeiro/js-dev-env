# Development WebServers
    - http-server (Ultra-simple. Single command servers current directory)
    - live-server (Lightweight. Support live-reloading)
    - express (Comprehensive. Highly configurable. Can be used in Production. Can run it everywhere)
    - koa
    - hapi
    - budo (Integrates with Browserify. Hot reloading)
    - Webpack Dev Server (Built in to Webpack. Servers from memory. Hot reloading)
    - Browsersync (Dedicated IP for sharing work on LAN. All interactions remain in sync. Great for cross-device testing.)

# Sharing Work-in-progress
Packages used to share your local application across the internet without publishing it:
    - localtunnel (Easiest setup Ultra-versatile)
    - ngrok (Easy setup Secure)
    - Surge (No firewall hole, Hosting persists, Only static files)
    - Now (No firewall hole, Hosting persists, Only static files)

- localtunnel:
    * Using it to share your app:
        1) run you app (node myapp.js)
        2) Run the command: 'lt --port {port} [--subdomain {sub-domain}]'. Examples:
            - lt --port 3000
            - lt --port 3000 --subdomain alexandreribeiro
    * Combining it with 'Browsersync' would be a great idea to test your local app in multiple devices

# Automation
    - Grunt
        - The original one
        - It's configuration based. Configured through a json file
        - Writes intermediary files between steps
        - Large plugin ecosystem
    - Gulp
        - A more modern task runner
        - Focus in memory-streams (pipes)
        - Fast(er)
        - It's code based rather than configuration based.
        - Large plugin ecosystem
    - npm scripts
        - Declared in the "scripts" section in the package.json
        - Leverage your OS' command line
        - Directly use npm Packages
        - Call separate Node scripts
        - Convention-based pre/post hooks
        - Leverage world's largest package manager
        Why npm Scripts?
            - The simplicity of using npm packages directly
            - No need for separate plugins
            - Simpler debugging
            - Better docs
            - Easy to learn
            - Simple

# Transpiling
Transpilers:
    - Babel
        - Allows you to enjoy all the new features of JavaScript, even when they're still experimental.
        - Modern, standards-based JS
        - You write standardized JS
        - Leverage full JS Ecosystem
    - TypeScript
        - Superset of JavaScript
        - Adds additional functionalities to JavaScript
        - Enhanced autocompletion
        - Enhanced readability
        - Safer refactoring
        - Clearer intent

# 5 Modules Formats
    - Universal Module Definition (UMD)
        - Supports global variables
        - The past, so should be avoided
        - Syntax:
                myGlobal;

    - IIFE
        - The past, so should be avoided
        - Syntax:
            (function() { /* ... */ })();

    - Asynchronous Module Definition (ADM)
        - The past, so should be avoided
        - Syntax:
            define(['jq'], function(jq) {});

    - CommonJS (CJS)
        - Better, modern and more standardized approach
        - Used when working in node.js
        - Syntax:
            var jquery = require('jquery');
    
    - ES6 Modules
        - Better, modern and more standardized approach
        - Used when working in ES6
        - Syntax:
            import jQuery  from 'jquery';

# Why using ES6 Modules?
    - standardized
    - Statically analyzable, which means the code can be read and analyzed in a predictable way
        - Improved autocomplete
        - Intelligent refactoring
        - Code fails fast
        - Tree shaking
    - Easy to read
        - Named imports
        - Default exports

# Blundlers

    - Browserify (Simple)
        - The original. It helped popularize the idea of using npm packages on the Web
        - The first bundler to reach mass adoption
        - Bundle npm packages for the web.
        - Uses CommonJS pattern
        - Large plugin ecosystem

    - Webpack (Comprehensive)
        - Bundles much more than just JS
        - Offers a huge ecosystem of loaders, so you can easily teach Webpack to  intelligently handle your CSS, images, fonts and more 
        - You can import CSS, Images, etc. like JS
        - Built in hot-reloading web server
        - Servers files from memory, which speeds development, builds, and automatically updates client-side state to reflect code changes.

    - Rollup (Tree-shaking and performance, but new)
        - First tree shaking bundler, which means it eliminates code you're not using from the final bundle
        - It's faster loading production code (faster than Browserify and Webpack)
        - Quite new compared to established competitors like Browserify and Webpack
        - Great for library authors
        - Doesn't have hot reloading and code splitting yet

    - JSPM (Runtime loader, package manager)
        - Uses SystemJS, a universal module loader. Which means it can load a variety of JS module styles, including ADM, CommonJS and ES6 modules.
        - Can load modules at runtime
        - Has its own package manager
        - Can install from npm, git and more
        - Uses Rollup, so you get to enjoy Rollup's tree shaking

# Why using Webpack?
    - Much more than just JS: CSS, Images, Fonts and HTML.
    - Bundle splitting, which means you can generate separate bundles for different sections of your app, so they're download on demand
    - Includes built-in Web server that supports hot module reloading
    - Webpack 2 offers tree shaking
    - For now it's the most used bundler

# Sourcemaps
    - Maps the bundled, transpiled and minified code back to original source
    - They can be automatically generated as part of our builds
    - Sourcemaps are downloaded only when you open developer tools
    - It's defined by the 'devtool' option in the Webpack config file (https://webpack.js.org/configuration/devtool/)
    - To debug the code you should write a "debugger;" at the point you want to stop

# Linting
Linting is the process of running a program that will analyse code for potential errors.

# Why Lint?
    - Enforces consistency. Exanples:
        - Enforcing position of curly braces
        - Warning about built-in features the team is decided to avoid, like "confirm, alert"
        - Uses of trailing comma
        - Declaring global variables
        - Disallowing the use of eval
    - Avoids mistakes. Examples:
        - Extra parenthesis
        - Overwriting a function
        - Assignment in a conditional
        - Missing default case in switch
        - Leaving debugging-related junk in the code, ex.: debugger / console.log

# Linters
    - JSLint: The original. It's extremely opinionated.
    - JSHint: An improvement on JSLint. Offers more configurability.
    - ESLint: The most popular linter by far. So powerful and configurable. It has become the de facto standard.

    At this time (01/05/2017), none of these linters support TypeScript. Although ESLint is expected to add support in the near feature.

# Configuring ESLint
Core decisions:
    1) Config format?
        - It supports several formats (http://eslint.org/docs/2.0.0/user-guide/configuring#configuration-file-formats) 
        - But using the existing package.json avoids having a new file        
    2) Which built-in rules?
        - Should be decided by you (http://eslint.org/docs/rules/)
    3) Warnings or errors?
        - For each rule it should be analyzed which one is better:
        - Warnings:
            - Can continue Development
            - Can be ignored
            - Team must agree: Fix warnings
        - Errors:
            - Break the build
            - Cannot be ignored
            - Team is forced to comply

    4) Which plugins?
        https://github.com/dustinspecker/awesome-eslint#plugins
        
    5) Use preset instead?
        - ESLint comes already with a preset
        - Other options:
            - airbnb (https://www.npmjs.com/package/eslint-config-airbnb)
            - XO (https://github.com/sindresorhus/eslint-config-xo)

# ESLint doesn't watch files
The simplest way to run ESLint is via the command line.
However, it doesn't currently include a watch setting built-in. Ways to do this:
    
    - eslint-loader
        - Webpack runs ESLint each time we run our build.
        - It re-lints all files every time you hit Save.
    - eslint-watch
        - ESLint wrapper that adds file watching capability
        - It isn't tied to Webpack
        - Better warning/errors formating
        - Displays a message when linting comes back clean, instead of being silent
        - Easily lint all the files, such as tests, webpack config and build scripts.

# Linting experimental features
The features supported while directly running ESLint are:
    - Supports ES6 and ES7 natively
    - Also supports object spread

But if if you want to use experimental features you can use "Babel-eslint" instead.
    - It also lints stage 0 - 4 features (https://babeljs.io/docs/plugins/#presets-stage-x-experimental-presets-)

# Why lint via an Automated Build Process?
    - One single place to check all feedback related to the code
    - Universal configuration, regardless the editor
    - Part of continuous integration

# JavaScript Testing Styles
    - Unit: Focused on testing single function or module
    - Integration: Focused on testing interactions between modules
    - UI: Automate interactions with UI

    Differences between Unit tests and Integration tests
        - Unit tests:
            - Test a small unit 
            - Often a single function
            - Fast
            - Run upon save
        - Integration tests:
            - Test multiple units
            - Often involves clicking and waiting (often require real external resources like browsers, web APIs and databases)
            - Slow
            - Often run on demand, or in QA

# Unit Testing decisions
    - Framework:
        - Mocha:
            - Most popular
            - Highly configurable
            - Mature
            - Large ecosystem of support
        - Jasmine:
            - It's nearly as popular as Mocha and quite similar
            - Includes and assertion library built in
            - Less configurable than Mocha
        - Tape:
            - Leanest and simplest of the bunch
            - Its simplicity and minimal configuration is are its key strengths.
        - QUnit
            - Oldest one
            - Create to test jQuery
        - AVA:
            - Runs the tests in parallel
            - Only reruns impacted tests
        Jest:
            - Created by Facebook
            - Nice wrapper over Jasmine
            - Code coverage
            - JSDOM
            - Popular conventions for finding your test files all built in

    - Assertion library
        Assertion is a way to declare what you expect. Ex.: { expect(2+2).to.equal(4); }
        Some options:
        - Chai.js
        - Should.js
        - Expect.js

    - Helper Libraries
        Should we use a helper library? And if so, which one?
        - JSDOM:
            - Simulate the browser's domain
            - Run DOM-related tests without a browser
        - Cheerio
            - jQuery for the server
            - Query virtual DOM using jQuery selectors
    - Where to run tests
        - Browser
            - Karma and Testem: popular test runners for this
        - Headless Browser (it's a browser that doesn't have a visible interface)
            - PhantomJS: a full real browser running the V8 JavaScript engine behind the scenes.
        - In-memory DOM
            - JSDOM: a library that simulates an actual browser by creating a DOM in memory that we can interact with.
    - Where to place tests
        - Centralized in "tests" folder?
            Many people opt for this because it's a common approach BUT it's not the best option.
        - Alongside each file being test?
            This approach brings us some advantages:
            - Easy imports, since the file under test is in the same path. Ex.: './underTestFile'
            - Clear visibility of the test files
            - Convenient to open both at the same time, since they're together
            - No recreating folder structure
            - Easy to refactor and move files

    - When to run tests
        Unit tests should run whenever you hit save. That way you have:
            - Rapid feedback
            - Facilitates TDD (test-driven development)
            - Automatic = Low friction
            - Increases the visibility of the tests that do exist

# Unit Testing - made decisions
    - Framework: Mocha
    - Assertion library: Chai
    - Helper Library: JSDOM
    - Where to run tests: Node
    - Where to place tests: Alongside
    - Where to run tests: Upon save

# Continuous Integration (CI)
When someone commits code, it's handy to confirm immediately that the commit works as expected when on another machine.
That's what continuous integration server is for. It catches mistakes quickly, such as when you:
    - Forget to commit a file
    - Forget to update package.json
    - Commit doesn't run cross-platform
    - Node version conflicts
    - Bad merge
    - Didn't run tests

# What does a CI Server do?
What does a CI Server do to provide all these benefits?
    - First it builds your application automatically the moment you commit
    - It runs your tests suit, assuring they pass on multiple machines
    - It can run check code coverage and reject the commit
    - It could also automate deployment

# CI Servers
    - Travis (Linux-based, Hosted solution)
    - Appveyor (Windows-based, Hosted solution)
    - Jenkins (Popular, Non-hosted solution)
    - CircleCI
    - Semaphore
    - SnapCI
